"""
Fix Day 20 Quiz
================
Regenerate quiz for Day 20 that failed during initial generation
"""

import os
import google.generativeai as genai
from supabase import create_client, Client
import json
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Initialize clients
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.0-flash-exp')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def fix_day_20():
    """Regenerate quiz for Day 20"""
    
    print("üîß Fixing Day 20 Quiz\n")
    
    # Get Day 20 content
    result = supabase.table('daily_content').select('*').eq('day_number', 20).single().execute()
    content_item = result.data
    
    title = content_item['title']
    content = content_item['content']
    
    print(f"üìñ Content: {title}")
    print(f"üìù Generating quiz...\n")
    
    # Generate quiz with more explicit JSON formatting
    prompt = f"""
Ê†πÊìö‰ª•‰∏ãÁáüÈ§äÊõ∏Á±çÂÖßÂÆπÔºåÁîüÊàê3ÈÅìÁπÅÈ´î‰∏≠ÊñáÁöÑÂ§öÈ†ÖÈÅ∏ÊìáÈ°å„ÄÇ

Ê®ôÈ°åÔºö{title}

Êõ∏Á±çÂÖßÂÆπÔºö
{content}

Ë¶ÅÊ±ÇÔºö
1. ÊØèÈ°åÊúâ4ÂÄãÈÅ∏È†ÖÔºàA„ÄÅB„ÄÅC„ÄÅDÔºâ
2. Ê∏ÖÊ•öÊ®ôË®ªÊ≠£Á¢∫Á≠îÊ°à
3. È°åÁõÆË¶ÅÊ∏¨Ë©¶Â∞çÊ†∏ÂøÉÊ¶ÇÂøµÁöÑÁêÜËß£
4. Èõ£Â∫¶ÈÅ©‰∏≠ÔºåÈÅ©Âêà‰∏ÄËà¨ËÆÄËÄÖ
5. Êèê‰æõÁ∞°Áü≠ÁöÑÁ≠îÊ°àËß£Èáã
6. **ÈáçË¶Å**: ËøîÂõûÁ¥îJSONÊ†ºÂºèÔºå‰∏çË¶ÅÊúâ‰ªª‰ΩïmarkdownË™ûÊ≥ïÊàñÈ°çÂ§ñÊñáÂ≠ó

JSONÊ†ºÂºèÔºàÂö¥Ê†ºÈÅµÂÆàÔºâÔºö
{{
  "questions": [
    {{
      "question": "ÂïèÈ°åÂÖßÂÆπÔºü",
      "options": [
        "A. ÈÅ∏È†Ö1",
        "B. ÈÅ∏È†Ö2",
        "C. ÈÅ∏È†Ö3",
        "D. ÈÅ∏È†Ö4"
      ],
      "correct_answer": "A",
      "explanation": "ÁÇ∫‰ªÄÈ∫ºÈÄôÂÄãÁ≠îÊ°àÊ≠£Á¢∫ÁöÑÁ∞°Áü≠Ëß£Èáã"
    }}
  ]
}}

Á¢∫‰øùoptionsÊòØ‰∏ÄÂÄãÈô£ÂàóÔºåÊØèÂÄãÂÖÉÁ¥†ÊòØÂÆåÊï¥ÁöÑÂ≠ó‰∏≤„ÄÇ
"""
    
    try:
        # Try multiple times if needed
        for attempt in range(3):
            response = model.generate_content(prompt)
            text = response.text.strip()
            
            # Clean up response
            if text.startswith('```'):
                parts = text.split('```')
                if len(parts) >= 2:
                    text = parts[1]
                    if text.startswith('json') or text.startswith('JSON'):
                        text = text[4:].strip()
            
            text = text.strip()
            
            try:
                # Try to parse
                quiz_data = json.loads(text)
                
                # Validate structure
                if 'questions' in quiz_data and len(quiz_data['questions']) >= 3:
                    # Success! Save to database
                    db_data = {
                        "day_number": 20,
                        "questions": quiz_data
                    }
                    
                    supabase.table('quizzes').upsert(db_data).execute()
                    
                    print(f"‚úÖ Successfully generated and saved Day 20 quiz!")
                    print(f"   {len(quiz_data['questions'])} questions created\n")
                    
                    # Show sample question
                    q1 = quiz_data['questions'][0]
                    print("üìù Sample Question:")
                    print(f"   {q1['question']}")
                    print(f"\n   Options:")
                    for opt in q1['options']:
                        print(f"   {opt}")
                    print(f"\n   Answer: {q1['correct_answer']}")
                    
                    return True
                else:
                    print(f"   Attempt {attempt + 1}: Invalid structure, retrying...")
                    
            except json.JSONDecodeError as e:
                print(f"   Attempt {attempt + 1}: JSON error, retrying...")
                if attempt == 2:
                    print(f"\n‚ùå Failed after 3 attempts")
                    print(f"   Last response: {text[:200]}...")
                    return False
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    print("="*60)
    print("  Fix Day 20 Quiz")
    print("="*60)
    print()
    
    success = fix_day_20()
    
    print()
    print("="*60)
    if success:
        print("üéâ Day 20 quiz fixed successfully!")
    else:
        print("‚ö†Ô∏è  Could not fix Day 20 quiz automatically")
        print("   You may need to create it manually or try again later")
    print("="*60)

